/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2116.0) */

#ifndef BLE_ESCORT_BASIS_H__
#define BLE_ESCORT_BASIS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief ESCORT BASIS event type. */
typedef enum
{ 
    BLE_ESCORT_BASIS_VEHICHLE_IDENTIFY_NUMBER_EVT_NOTIFICATION_ENABLED,  /**< vehichle identify number value notification enabled event. */
    BLE_ESCORT_BASIS_VEHICHLE_IDENTIFY_NUMBER_EVT_NOTIFICATION_DISABLED, /**< vehichle identify number value notification disabled event. */
    BLE_ESCORT_BASIS_VEHICHLE_IDENTIFY_NUMBER_EVT_WRITE, /**< vehichle identify number write event. */
    BLE_ESCORT_BASIS_USER_INFO_EVT_NOTIFICATION_ENABLED,  /**< user info value notification enabled event. */
    BLE_ESCORT_BASIS_USER_INFO_EVT_NOTIFICATION_DISABLED, /**< user info value notification disabled event. */
    BLE_ESCORT_BASIS_USER_INFO_EVT_WRITE, /**< user info write event. */
    BLE_ESCORT_BASIS_WAREHOUSE_INFO_EVT_NOTIFICATION_ENABLED,  /**< warehouse info value notification enabled event. */
    BLE_ESCORT_BASIS_WAREHOUSE_INFO_EVT_NOTIFICATION_DISABLED, /**< warehouse info value notification disabled event. */
    BLE_ESCORT_BASIS_WAREHOUSE_INFO_EVT_WRITE, /**< warehouse info write event. */
    BLE_ESCORT_BASIS_ESCORT_STATE_EVT_NOTIFICATION_ENABLED,  /**< escort state value notification enabled event. */
    BLE_ESCORT_BASIS_ESCORT_STATE_EVT_NOTIFICATION_DISABLED, /**< escort state value notification disabled event. */
    BLE_ESCORT_BASIS_ESCORT_STATE_EVT_WRITE, /**< escort state write event. */
    BLE_ESCORT_BASIS_CMD_UPDATE_EVT_NOTIFICATION_ENABLED,  /**< cmd update value notification enabled event. */
    BLE_ESCORT_BASIS_CMD_UPDATE_EVT_NOTIFICATION_DISABLED, /**< cmd update value notification disabled event. */
    BLE_ESCORT_BASIS_CMD_UPDATE_EVT_WRITE, /**< cmd update write event. */
} ble_escort_basis_evt_type_t;

// Forward declaration of the ble_escort_basis_t type.
typedef struct ble_escort_basis_s ble_escort_basis_t;








/**@brief vehichle identify number structure. */
typedef struct
{
    uint8_array_t vin;
} ble_escort_basis_vehichle_identify_number_t;
/**@brief user info structure. */
typedef struct
{
    uint8_array_t userid;
} ble_escort_basis_user_info_t;
/**@brief warehouse info structure. */
typedef struct
{
    uint8_array_t warehouseinfo;
} ble_escort_basis_warehouse_info_t;
/**@brief escort state structure. */
typedef struct
{
    uint8_t escortstate;
} ble_escort_basis_escort_state_t;
/**@brief cmd update structure. */
typedef struct
{
    uint8_t cmd;
} ble_escort_basis_cmd_update_t;

/**@brief ESCORT BASIS Service event. */
typedef struct
{
    ble_escort_basis_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_escort_basis_vehichle_identify_number_t vehichle_identify_number; /**< Holds decoded data in Write event handler. */
        ble_escort_basis_user_info_t user_info; /**< Holds decoded data in Write event handler. */
        ble_escort_basis_warehouse_info_t warehouse_info; /**< Holds decoded data in Write event handler. */
        ble_escort_basis_escort_state_t escort_state; /**< Holds decoded data in Write event handler. */
        ble_escort_basis_cmd_update_t cmd_update; /**< Holds decoded data in Write event handler. */
    } params;
} ble_escort_basis_evt_t;

/**@brief ESCORT BASIS Service event handler type. */
typedef void (*ble_escort_basis_evt_handler_t) (ble_escort_basis_t * p_escort_basis, ble_escort_basis_evt_t * p_evt);

/**@brief ESCORT BASIS Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_escort_basis_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the ESCORT BASIS Service. */
    ble_escort_basis_vehichle_identify_number_t ble_escort_basis_vehichle_identify_number_initial_value; /**< If not NULL, initial value of the vehichle identify number characteristic. */ 
    ble_escort_basis_user_info_t ble_escort_basis_user_info_initial_value; /**< If not NULL, initial value of the user info characteristic. */ 
    ble_escort_basis_warehouse_info_t ble_escort_basis_warehouse_info_initial_value; /**< If not NULL, initial value of the warehouse info characteristic. */ 
    ble_escort_basis_escort_state_t ble_escort_basis_escort_state_initial_value; /**< If not NULL, initial value of the escort state characteristic. */ 
    ble_escort_basis_cmd_update_t ble_escort_basis_cmd_update_initial_value; /**< If not NULL, initial value of the cmd update characteristic. */ 
} ble_escort_basis_init_t;

/**@brief ESCORT BASIS Service structure. This contains various status information for the service.*/
struct ble_escort_basis_s
{
    ble_escort_basis_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the ESCORT BASIS Service. */
    uint16_t service_handle; /**< Handle of ESCORT BASIS Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t vehichle_identify_number_handles; /**< Handles related to the vehichle identify number characteristic. */
    ble_gatts_char_handles_t user_info_handles; /**< Handles related to the user info characteristic. */
    ble_gatts_char_handles_t warehouse_info_handles; /**< Handles related to the warehouse info characteristic. */
    ble_gatts_char_handles_t escort_state_handles; /**< Handles related to the escort state characteristic. */
    ble_gatts_char_handles_t cmd_update_handles; /**< Handles related to the cmd update characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the ESCORT BASIS.
 *
 * @param[out]  p_escort_basis       ESCORT BASIS Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_escort_basis_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_escort_basis_init(ble_escort_basis_t * p_escort_basis, const ble_escort_basis_init_t * p_escort_basis_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_escort_basis_on_ble_evt(ble_escort_basis_t * p_escort_basis, ble_evt_t * p_ble_evt);

/**@brief Function for setting the vehichle identify number.
 *
 * @details Sets a new value of the vehichle identify number characteristic. The new value will be sent
 *          to the client the next time the client reads the vehichle identify number characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_escort_basis                 ESCORT BASIS Service structure.
 * @param[in]   p_vehichle_identify_number  New vehichle identify number.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_escort_basis_vehichle_identify_number_set(ble_escort_basis_t * p_escort_basis, ble_escort_basis_vehichle_identify_number_t * p_vehichle_identify_number);

/**@brief Function for setting the user info.
 *
 * @details Sets a new value of the user info characteristic. The new value will be sent
 *          to the client the next time the client reads the user info characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_escort_basis                 ESCORT BASIS Service structure.
 * @param[in]   p_user_info  New user info.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_escort_basis_user_info_set(ble_escort_basis_t * p_escort_basis, ble_escort_basis_user_info_t * p_user_info);

/**@brief Function for setting the warehouse info.
 *
 * @details Sets a new value of the warehouse info characteristic. The new value will be sent
 *          to the client the next time the client reads the warehouse info characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_escort_basis                 ESCORT BASIS Service structure.
 * @param[in]   p_warehouse_info  New warehouse info.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_escort_basis_warehouse_info_set(ble_escort_basis_t * p_escort_basis, ble_escort_basis_warehouse_info_t * p_warehouse_info);

/**@brief Function for setting the escort state.
 *
 * @details Sets a new value of the escort state characteristic. The new value will be sent
 *          to the client the next time the client reads the escort state characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_escort_basis                 ESCORT BASIS Service structure.
 * @param[in]   p_escort_state  New escort state.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_escort_basis_escort_state_set(ble_escort_basis_t * p_escort_basis, ble_escort_basis_escort_state_t * p_escort_state);

/**@brief Function for setting the cmd update.
 *
 * @details Sets a new value of the cmd update characteristic. The new value will be sent
 *          to the client the next time the client reads the cmd update characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_escort_basis                 ESCORT BASIS Service structure.
 * @param[in]   p_cmd_update  New cmd update.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_escort_basis_cmd_update_set(ble_escort_basis_t * p_escort_basis, ble_escort_basis_cmd_update_t * p_cmd_update);

#endif //_BLE_ESCORT_BASIS_H__
