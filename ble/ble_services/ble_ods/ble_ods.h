/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2116.0) */

#ifndef BLE_ODER_ID_H__
#define BLE_ODER_ID_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief ODER ID event type. */
typedef enum
{ 
    BLE_ODER_ID_ODER_ID_BASIS_EVT_NOTIFICATION_ENABLED,  /**< Oder Id Basis value notification enabled event. */
    BLE_ODER_ID_ODER_ID_BASIS_EVT_NOTIFICATION_DISABLED, /**< Oder Id Basis value notification disabled event. */
    BLE_ODER_ID_ODER_ID_BASIS_EVT_CCCD_WRITE, /**< Oder Id Basis CCCD write event. */
    BLE_ODER_ID_ODER_ID_BASIS_EVT_WRITE, /**< Oder Id Basis write event. */
} ble_oder_id_evt_type_t;

// Forward declaration of the ble_oder_id_t type.
typedef struct ble_oder_id_s ble_oder_id_t;








/**@brief Oder Id Basis structure. */
typedef struct
{
    uint8_array_t data;
} ble_oder_id_oder_id_basis_t;

/**@brief ODER ID Service event. */
typedef struct
{
    ble_oder_id_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_oder_id_oder_id_basis_t oder_id_basis; /**< Holds decoded data in Write event handler. */
    } params;
} ble_oder_id_evt_t;

/**@brief ODER ID Service event handler type. */
typedef void (*ble_oder_id_evt_handler_t) (ble_oder_id_t * p_oder_id, ble_oder_id_evt_t * p_evt);

/**@brief ODER ID Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_oder_id_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the ODER ID Service. */
    ble_oder_id_oder_id_basis_t ble_oder_id_oder_id_basis_initial_value; /**< If not NULL, initial value of the Oder Id Basis characteristic. */ 
} ble_oder_id_init_t;

/**@brief ODER ID Service structure. This contains various status information for the service.*/
struct ble_oder_id_s
{
    ble_oder_id_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the ODER ID Service. */
    uint16_t service_handle; /**< Handle of ODER ID Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t oder_id_basis_handles; /**< Handles related to the Oder Id Basis characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the ODER ID.
 *
 * @param[out]  p_oder_id       ODER ID Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_oder_id_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_oder_id_init(ble_oder_id_t * p_oder_id, const ble_oder_id_init_t * p_oder_id_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_oder_id_on_ble_evt(ble_oder_id_t * p_oder_id, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Oder Id Basis.
 *
 * @details Sets a new value of the Oder Id Basis characteristic. The new value will be sent
 *          to the client the next time the client reads the Oder Id Basis characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_oder_id                 ODER ID Service structure.
 * @param[in]   p_oder_id_basis  New Oder Id Basis.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_oder_id_oder_id_basis_set(ble_oder_id_t * p_oder_id, ble_oder_id_oder_id_basis_t * p_oder_id_basis);

/**@brief Function for sending the Oder Id Basis.
 *
 * @details The application calls this function after having performed a oder id basis.
 *          The oder id basis data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_oder_id                    ODER ID Service structure.
 * @param[in]   p_oder_id_basis               New oder id basis.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_oder_id_oder_id_basis_send(ble_oder_id_t * p_oder_id, ble_oder_id_oder_id_basis_t * p_oder_id_basis);

#endif //_BLE_ODER_ID_H__
